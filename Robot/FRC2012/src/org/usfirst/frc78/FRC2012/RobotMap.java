// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc78.FRC2012;
    
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Relay ballConveyorconveyorRelay;
    public static DigitalInput ballConveyorballSensor;
    public static SpeedController ballPickerpickerMotor;
    public static SpeedController ballShootershooterMotor;
    public static Encoder ballShootershooterEncoder;
    public static SpeedController chassisleftMotor;
    public static SpeedController chassisrightMotor;
    public static RobotDrive chassisdrive;
    public static SpeedController fangsfangsMotor;
    public static DigitalInput fangslowerLimit;
    public static DigitalInput fangsupperLimit;
    public static Relay targetCameraledRing;
    public static SpeedController turretturretMotor;
    public static AnalogChannel turretturretPot;
    public static DigitalInput turretcwLimit;
    public static DigitalInput turretccwLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ballConveyorconveyorRelay = new Relay(1, 2);
	LiveWindow.addActuator("BallConveyor", "conveyorRelay", ballConveyorconveyorRelay);
        
        ballConveyorballSensor = new DigitalInput(1, 9);
	LiveWindow.addSensor("BallConveyor", "ballSensor", ballConveyorballSensor);
        
        ballPickerpickerMotor = new Victor(1, 4);
	LiveWindow.addActuator("BallPicker", "pickerMotor", (Victor) ballPickerpickerMotor);
        
        ballShootershooterMotor = new Victor(1, 3);
	LiveWindow.addActuator("BallShooter", "shooterMotor", (Victor) ballShootershooterMotor);
        
        ballShootershooterEncoder = new Encoder(1, 10, 1, 11, true, EncodingType.k1X);
	LiveWindow.addSensor("BallShooter", "shooterEncoder", ballShootershooterEncoder);
        ballShootershooterEncoder.setDistancePerPulse(1.0);
        ballShootershooterEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        ballShootershooterEncoder.start();
        chassisleftMotor = new Victor(1, 1);
	LiveWindow.addActuator("Chassis", "leftMotor", (Victor) chassisleftMotor);
        
        chassisrightMotor = new Victor(1, 2);
	LiveWindow.addActuator("Chassis", "rightMotor", (Victor) chassisrightMotor);
        
        chassisdrive = new RobotDrive(chassisleftMotor, chassisrightMotor);
	
        chassisdrive.setSafetyEnabled(true);
        chassisdrive.setExpiration(0.1);
        chassisdrive.setSensitivity(0.5);
        chassisdrive.setMaxOutput(1.0);
        
        fangsfangsMotor = new Victor(1, 5);
	LiveWindow.addActuator("Fangs", "fangsMotor", (Victor) fangsfangsMotor);
        
        fangslowerLimit = new DigitalInput(1, 8);
	LiveWindow.addSensor("Fangs", "lowerLimit", fangslowerLimit);
        
        fangsupperLimit = new DigitalInput(1, 7);
	LiveWindow.addSensor("Fangs", "upperLimit", fangsupperLimit);
        
        targetCameraledRing = new Relay(1, 1);
	LiveWindow.addActuator("TargetCamera", "ledRing", targetCameraledRing);
        
        turretturretMotor = new Victor(1, 6);
	LiveWindow.addActuator("Turret", "turretMotor", (Victor) turretturretMotor);
        
        turretturretPot = new AnalogChannel(1, 1);
	LiveWindow.addSensor("Turret", "turretPot", turretturretPot);
        
        turretcwLimit = new DigitalInput(1, 5);
	LiveWindow.addSensor("Turret", "cwLimit", turretcwLimit);
        
        turretccwLimit = new DigitalInput(1, 6);
	LiveWindow.addSensor("Turret", "ccwLimit", turretccwLimit);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
